import ko from 'knockout';

var stateObservable = ko.observable();

function setState(state) {
  stateObservable(state);
}

function getState() {
  return stateObservable;
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





















var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var defaultMapStateToParams = function defaultMapStateToParams() {
  return {};
};
var defaultMergeParams = function defaultMergeParams(stateParams, ownParams) {
  return _extends({}, ownParams, stateParams);
};

var throwIfNotAFunction = function throwIfNotAFunction(o, message) {
  if (typeof o !== 'function') {
    throw new Error(message);
  }
};

var makeNullableFunctionArgInvalidTypeMessage = function makeNullableFunctionArgInvalidTypeMessage(arg, argName) {
  return 'Invalid type \'' + (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) + '\' for connect parameter ' + argName + '. ' + argName + ' must be a null or a function.';
};

var throwIfNullableFuctionArgNotAFunction = function throwIfNullableFuctionArgNotAFunction(arg, argName) {
  throwIfNotAFunction(arg, makeNullableFunctionArgInvalidTypeMessage(arg, argName));
};

var connect = function connect() {
  var mapStateToParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultMapStateToParams;
  var mergeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMergeParams;

  var mapStateToParamsFunc = mapStateToParams === null ? defaultMapStateToParams : mapStateToParams;
  var mergeParamsFunc = mergeParams === null ? defaultMergeParams : mergeParams;

  throwIfNullableFuctionArgNotAFunction(mapStateToParamsFunc, 'mapStateToParams');
  throwIfNullableFuctionArgNotAFunction(mergeParamsFunc, 'mergeParams');

  return function (ViewModel) {
    throwIfNotAFunction(ViewModel, 'Invalid type \'' + (typeof ViewModel === 'undefined' ? 'undefined' : _typeof(ViewModel)) + '\' for ViewModel passed to result of connect(). ViewModel must be a function.');
    return function (ownParams) {
      var state = getState();
      var stateParams = mapStateToParamsFunc(state(), ownParams);
      var mergedParams = mergeParamsFunc(stateParams, ownParams);
      return new ViewModel(mergedParams);
    };
  };
};

export { setState, getState, connect };
